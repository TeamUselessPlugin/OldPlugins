plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(16))

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'codemc'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    compileOnly('io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT')
    compileOnly('org.jetbrains:annotations:22.0.0')
    compileOnly('com.github.TeamPotion.CommandAPI-DisableLog:commandapi-core:6.3.0')
//    compileOnly fileTree(dir: 'libs', include: ['*.jar']) // Local library

    implementation('com.github.TeamPotion.CommandAPI-DisableLog:commandapi-shade:6.3.0')
    implementation('com.github.kill00.ConfigAPI:configapi-core:1.0.7B')
    implementation('de.tr7zw:item-nbt-api-plugin:2.8.0')
}


tasks {
    compileJava {
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    processResources {
        filesMatching("**/*.yml") {
            expand(project.properties)
        }
    }

    jar {
        archiveBaseName.set(project.properties.get("pluginName").toString())
        archiveVersion.set(project.properties.get("pluginVersion").toString())
        archiveClassifier.set("")
        from("LICENSE", "README.MD")
    }

    project.delete(
            file('build/resources')
    )
}

task paperJar(type: Jar, dependsOn: classes) {
    finalizedBy shadowJar {
        archiveBaseName.set(project.properties.get("pluginName").toString())
        archiveVersion.set(project.properties.get("pluginVersion").toString())
        archiveClassifier.set("")
        from("LICENSE", "README.MD")

        doLast {
            copy {
                from(archiveFile)
                into(new File(rootDir, "../../Desktop/New/plugins/update"))
            }
        }
    }
    enabled(false)

    assemble {
        dependsOn(shadowJar)
    }
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//    archiveBaseName.set(project.properties.get("pluginName").toString())
//    archiveVersion.set(project.properties.get("pluginVersion").toString())
//    archiveClassifier.set("sources")
//    from(sourceSets.main.allSource)
//}